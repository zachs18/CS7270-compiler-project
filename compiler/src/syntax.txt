list[x] = ( x ( ',' x )* ','? )?

FILE: ITEM* eof

ITEM: FNITEM | STATICITEM

FNITEM: 'extern'? 'fn' ident '(' list[TYPED_PATTERN] ')' (BLOCK | ';')

STATICITEM: 'extern'? 'static' 'mut'? ident ':' TYPE ( '=' EXPRESSION )? ';'

TYPED_PATTERN: PATTERN ':' TYPE

PATTERN:
 | '_'
 | ident
 | 'mut' ident
 | '(' list[PATTERN_WITH_ALT] ')'
 | '[' list[PATTERN_WITH_ALT] ']'

PATTERN_WITH_ALT: PATTERN ('|' PATTERN_WITH_ALT)?

TYPE:
 | ident
 | '[' TYPE (';' integer)? ']'
 | '(' list[TYPE] ')'
 | '*' ('const' | 'mut') TYPE

BLOCK: '{' STATEMENT* EXPRESSION? '}'

STATEMENT:
 | EXPRESSION ';'
 | LET_STATEMENT
// TODO: other statements?

LET_STATEMENT: 'let' PATTERN ( ':' TYPE )? ( '=' EXPRESSION )? ';'

EXPRESSION: EXPR_BLOCK | EXPR_NO_BLOCK

EXPR_NO_BLOCK:
 | `break` EXPR_NO_BLOCK
 | `return` EXPR_NO_BLOCK
 | OPERATOR_EXPRESSION
// TODO: other expressions

EXPR_BLOCK:
 | BLOCK
 | IF_EXPR
 | MATCH_EXPR
 | LOOP_EXPR

IF_EXPR: 'if' EXPR_NO_BLOCK BLOCK ( 'else' 'if' EXPR_NO_BLOCK BLOCK )* ('else' BLOCK)?

MATCH_EXPR: 'match' EXPR_NO_BLOCK '{' MATCH_ARMS '}'

MATCH_ARMS: MATCH_ARM*

MATCH_ARM: PATTERN '=>' EXPRESSION ','

LOOP_EXPR:
 | 'while' EXPR_NO_BLOCK BLOCK
 | 'for' PATTERN 'in' EXPR_NO_BLOCK BLOCK
 | 'loop' BLOCK

// Note: operator precedence is handled later (not in the syntax itself)
OPERATOR_EXPRESSION:
 | CAST_EXPR ( BINOP CAST_EXPR )*

BINOP: ARITH_BINOP | COMPARISON_BINOP | ASSIGN_BINOP

// Note: longer punct-sequences need to be checked first
ARITH_BINOP: '+' | '-' | '*' | '/' | '%' | '&&' | '||' | '&' | '|' | '^' | '>>' | '<<'
COMPARISON_BINOP: '==' | '<=' | '>=' | '!=' | '<' | '>'
ASSIGN_BINOP: '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&&=' | '||=' | '&=' | '|=' | '^=' | '>>=' | '<<='
RANGE_BINOP: '..' | '..='

// a single "thing" including unary prefix and suffix operators
// Note: operator precedence is handled later (not in the syntax itself)
UNARY_EXPR:
 | integer
 | ident
 | 'true'
 | 'false'
 | '_'
 | '(' list[EXPRESSION] ')'
 | '[' list[EXPRESSION] ']'
 | '-' UNARY_EXPR
 | '!' UNARY_EXPR
 | '*' UNARY_EXPR
 | '&' UNARY_EXPR
 | UNARY_EXPR '[' EXPRESSION ']'
 | UNARY_EXPR '(' list[EXPRESSION] ')'

// Separate from UNARY_EXPR since `x as u64[42]` doesn't make sense
CAST_EXPR: UNARY_EXPR ( 'as' TYPE )*
